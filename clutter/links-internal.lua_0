--- @script links-internal
-- @author rafmartom <rafmartom@gmail.com>
-- @usage
-- Pandoc lua filter to parse all the link elements for vim-dan.
-- 
-- It checks every link element parsed by the reader, checking its href property.
-- 
-- For each relative link (e.g., `href="/guidance/living-in-spain"`):
-- 
--   1. Search if it exists locally in the downloaded PATH:
--      `${DOCU_PATH}/downloaded/guidance/living-in-spain.html`
--   
--   2. If it exists:
--      - Adds a Link Source there
--      - `Inline Link Source => <L=${BUID}#${IID}>${LABEL}</L>
--      -   or
--      - `Block  Link Source => <L=${BUID}>${LABEL}</L>
--      - Example: `<L=F3>Living in Spain</L>
--
-- Example:
--
-- pandoc -f html -t plain ./downloaded/spain.html \
--   -L danlinkfrom-href.lua \
--   -V docu_path="$(readlink -f ./)"
--
-- pandoc -f html -t plain ./downloaded/jsobjref/Application.html \
--   -L id-danlinkto.lua \
--   -V file_processed="./downloaded/jsobjref/Application.html" \
--   -V objects_toparse="Span,Div" \
--   | sed -E ':a; N; s/\n(%\$.*?%\$)/ \1/'


-- ----------------------------------------------------------------------------
-- ----------------------------------------------------------------------------

--- IMPORT_DEPENDENCIES.
-- @section IMPORT_DEPENDENCIES


-- GETTING THE PATH WHERE THE SCRIPT IS SAVED
script_path = debug.getinfo(1, "S").source:sub(2)
-- Removing the filename to get the directory path
script_path = script_path:match("(.*/)")
project_path = script_path:match("(.*/)[^/]+/")

package.path = project_path .. "/lua_modules/share/lua/5.4/?.lua;" .. package.path
package.cpath = project_path .. "/lua_modules/lib/lua/5.4/?.so;" .. package.cpath
local PATH = require "path"


-- EOF EOF EOF IMPORT_DEPENDENCIES 
-- ----------------------------------------------------------------------------
-- ----------------------------------------------------------------------------



-- ----------------------------------------------------------------------------
-- ----------------------------------------------------------------------------

--- HELPER_FUNCTIONS.
-- Functions needed within the script
-- @section HELPER_FUNCTIONS


--- Strip leading slash of a path
function strip_lead_slash(myPath)
    if myPath == nil or myPath == "" then
        error("Error: strip_lead_slash requires a non-empty myPath argument.")
    end
    return string.gsub(myPath, "^/", "")
end

--- Append .html to the myPath string if is not present
function append_html(myPath)
    if not string.match(myPath, "%.html$") then
        return myPath .. ".html"
    end
    return myPath
end


--- strip_html strips the ".html" present in myPath
function strip_html(myPath)
    if myPath == nil or myPath == "" then
        error("Error: strip_html requires a non-empty myPath argument.")
    end
    return string.gsub(myPath, "%.html$", "")
end


--- Get the basename of a path
function basename(myPath)
    return string.match(myPath, "[^/]+$")
end


--- Create the danlinkfrom string
function create_danlinkfrom(href)
    local linkfrom_prefix = append_html(href)
--    local linkfrom_title = strip_html(basename(href))
    local linkfrom_title = PATH.basename(href)
    return '& @' .. linkfrom_prefix .. '@ ' .. linkfrom_title .. ' &'
end


--- Check if a file exists
function fileExists(full_path)
    local file = io.open(full_path, "r")
    if file then
        file:close()
        return true
    else
        return false
    end
end

--- Check if a path refers to a dir
function isDir(myPath)
    if string.match(myPath, "/$") then
        return true
    end
    return false
end

--- Print the statement if the debug mode is activated
-- @usage local DEBUG = true -- Activate the debugging mode
-- dprint('[DEBUG] myVar : ' , myVar) -- DEBUGGING
function dprint(...)
    if DEBUG then
        print(...) 
    end
end


-- EOF EOF EOF HELPER_FUNCTIONS
-- ----------------------------------------------------------------------------
-- ----------------------------------------------------------------------------


-- ----------------------------------------------------------------------------
-- ----------------------------------------------------------------------------

--- SCRIPT_VAR_INITIALIZATION.
-- @section SCRIPT_VAR_INITIALIZATION


local exit_status = nil
local docu_path = nil
local file_processed = nil
local file_no = nil
local DEBUG = false  -- Activate the debugging mode


-- EOF EOF EOF SCRIPT_VAR_INITIALIZATION 
-- ----------------------------------------------------------------------------
-- ----------------------------------------------------------------------------


-- ----------------------------------------------------------------------------
-- ----------------------------------------------------------------------------

--- SUBROUTINE_DECLARATIONS.
-- @section SUBROUTINE_DECLARATIONS


--- Load the arguments of the filter from variables
function loading_arguments (doc)
    docu_path = tostring(PANDOC_WRITER_OPTIONS["variables"]["docu_path"]) or nil
    file_processed = tostring(PANDOC_WRITER_OPTIONS["variables"]["file_processed"]) or nil
    links_anchor = tostring(PANDOC_WRITER_OPTIONS["variables"]["links_anchor"]) or nil
    file_no = tostring(PANDOC_WRITER_OPTIONS["variables"]["file_no"]) or nil

    return doc
end


--- Check each link
function check_links(elem)
    local href = elem.target  
    local danlinkfrom = null 
    local full_path = null
    local rel_path = href
    

    href_basename = PATH.basename(href)

    -- Correction for urls that finnish in path
    --  for instance href="../footagesource/" that will be pointing to
    --         href="../footagesource/index.html"
    if ( isDir(href) ) then
        href = href .. "index.html"
    end


    -- Sorting the kind of link we have
    -- Remember:
    --   External Links : (Either absolute or relative) Start with https:// or http://
    --       <a href="https://www.google.com">Google</a> 
    --   Anchor Links :
    --       <a href="#section1">Jump to Section 1</a>
    --   Internal Absolute Links : 
    --       <a href="/about/us.html">About Us</a>
    --   Internal Relative Links :
    --       <a href="about/us.html">About Us</a>
    --       <a href="../about/us.html">About Us</a>
    

    dprint('[DEBUG] href : ' , href) -- DEBUGGING

    -- Skipping Anchor links , External Links and Scheme Relative Links
    if href_basename:match("^#%a") and links_anchor == nil then
    dprint('[DEBUG] Skipping anchorlinks') -- DEBUGGING

        return
    elseif href:match("^#$") or href:match("^https?://") or href:match("^//") then
    dprint('[DEBUG] Is a External Link or just the empty #') -- DEBUGGING

        return
    -- Handling Internal Absolute Links
    elseif href:match("^/") then
    dprint('[DEBUG] Is Internal Absolute Link') -- DEBUGGING
        full_path = docu_path .. "/downloaded" ..  href
        rel_path = href

    -- Handling Internal Relative Links
    elseif href:match("^%.") or href:match("^%a") or href_basename:match("^#%a") then
    dprint('[DEBUG] Is Internal Relative Link') -- DEBUGGING
        full_path = PATH.normalize(docu_path .. "/downloaded" .. PATH.dirname(file_processed)) .. '/' .. href
        rel_path = PATH.normalize(PATH.dirname(file_processed)) .. '/' .. href
    else
    dprint('[DEBUG] Link type not recognised') -- DEBUGGING
    end

--    -- If they are Internal Relative Links Normalize the paths
--    if href:match("^%.") then
----print('into if')
--        full_path = PATH.normalize(docu_path .. "/downloaded" .. PATH.dirname(file_processed) .. '/' .. href)
--        rel_path = PATH.normalize(PATH.dirname(file_processed) .. '/' .. href)
--    -- Otherwise get their full_path in the system
--    else
----print('into else')
--        full_path = docu_path .. "/downloaded" ..  href
--        rel_path = href
--    end



    full_path = append_html(full_path)

    dprint('[DEBUG] Checking link full_path : ' .. full_path) -- DEBUGGING

    -- Check on each file if it exists
    if fileExists(full_path) then  
        local link_text = pandoc.utils.stringify(elem.content)
        local linkfrom_title = PATH.basename(full_path)
        return pandoc.Str('&' .. link_text .. '@' .. rel_path .. '@&')
--        return pandoc.Str('[+]' .. '&' .. link_text .. '@' .. rel_path .. '@&')
--        return pandoc.Str('& @' .. rel_path .. '@ ' .. '[+] ' .. link_text .. ' &')
    end
end


-- EOF EOF EOF SUBROUTINE_DECLARATIONS 
-- ----------------------------------------------------------------------------
-- ----------------------------------------------------------------------------


-- ----------------------------------------------------------------------------
-- ----------------------------------------------------------------------------

--- SUBROUTINE_CALLS.
-- Define the flow of execution of the filter, calling the previously defined subroutines.
-- @section SUBROUTINE_CALLS


return {

    { Pandoc = loading_arguments },
    { Link = check_links } 
}


-- EOF EOF EOF SUBROUTINE_CALLS 
-- ----------------------------------------------------------------------------
-- ----------------------------------------------------------------------------
